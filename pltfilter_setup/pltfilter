#!/bin/bash

help(){
    echo "
PLTFilter rearrange the data from .plt files.
Default output is csv.
"
}
usage(){
    echo "
USAGE:
  pltfilter [-h] [-d DELIMITER]

FLAGS:
  -d DELIMITER  set delimiter, if not set uses comma, overrides env variable PLTFILTER_DELIMITER
  -h            display thie help and exit

ENVIRONMENT VARIABLES:
  PLTFILTER_DELIMITER  set delimiter instead of comma (example: export PLTFILTER_DELIMITER=\";\")
  PLTFILTER_FOLDER     set default folder to get .plt files, if not set uses pltfilter running folder instead (example: export PLTFILTER_FOLDER=\"/path/to/plt/files\")
  PLTFILTER_OUTFOLDER  set default folder to save output files (example: export PLTFILTER_OUTFOLDER=\"/path/to/saved/files\")
"
}

filt3r(){ filename="$(echo $1 | tr "_" "\n" | head -n3 | tr "\n" "_")"; echo $filename; }

while getopts "hd:" opt; do
    case $opt in
        h)
            help
            usage
            exit 1 || return 1
            ;;
        d)
            DELIMITER="$OPTARG"
            ;;
        default)
            echo "Error: \"$OPTARG\" not recognized"
            usage
            exit 1 || return 1
            ;;
    esac
done
shift $((OPTIND-1))

[[ $DELIMITER ]] || DELIMITER=$PLTFILTER_DELIMITER
[[ $DELIMITER ]] || DELIMITER=","

xfile_data=$(goat -m -n --file-text="Select X-axis File" --list-title="Extract X-axis Parameter" --list-text="Select parameter to extract")
if [ -z "$xfile_data" ]; then
    exit 1 || return 1
fi
xfile="$(echo "$xfile_data" | tail -n1)"
xdata="$(echo "$(echo "$xfile_data" | sed "s/$xfile//g" | grep .)")"

yfiles_data=$(goat -n --file-text="Select Y-axis Files" --list-title="Extract Y-axis Parameters" --list-text="Select parameters to extract")
if [ -z "$yfiles_data" ]; then
    exit 1 || return 1
fi

if [ "$(ls $PLTFILTER_OUTFOLDER 2>/dev/null)" ]; then
    output_file=$PLTFILTER_OUTFOLDER
    [[ $(echo $output_file | grep -o . | tail -n1 | grep "/") ]] || output_file+=/
    output_file+=plot_$(echo $xfile | sed "s/$(filt3r $xfile)\|_n.*\|.csv//g")_$(date +%y_%m_%d_%T).csv
else
    OUTPATH=$(cat $HOME/.PLTFilter/.oldsave 2>/dev/null)
    [[ $OUTPATH ]] && OUTPATH+=/
    output_file=$(zenity --title "Save Output" --file-selection --save --filename="${OUTPATH}plot_$(echo $xfile | sed "s/$(filt3r $xfile)\|_n.*\|.csv//g")_$(date +%y_%m_%d_%T).csv" --file-filter="*.csv" --file-filter="*")
    if [ -z "$output_file" ]; then
        exit 1 || return 1
    fi
    realpath $(dirname $output_file) > $HOME/.PLTFilter/.oldsave
fi

if [ -z "$(echo $output_file | grep "\.csv")" ]; then
    touch $output_file.tmp_csv
    output_file+=".csv"
else
    touch $(echo $output_file | sed "s/\.csv/\.tmp_csv/g")
fi

tmp_folder=".tmp_$(date | tr " " "_")"
mkdir $tmp_folder
yfilenames="$(filt3r $xfile)$(echo $xfile | sed "s/.*_n\|.csv//g")"
ydata=""
for i in $(seq 1 $(echo "$yfiles_data" | wc -l)); do
    if [ "$(echo "$yfiles_data" | sed -n ${i}p | grep ".csv")" ]; then
        echo -e $ydata | grep . > $tmp_folder/$i
        yfilenames+="$DELIMITER$(filt3r $(echo "$yfiles_data" | sed -n ${i}p))$(echo "$yfiles_data" | sed -n ${i}p | sed "s/.*_n\|.csv//g")"
        ydata=""
    else
        ydata+="$(echo "$yfiles_data" | sed -n ${i}p)\n"
    fi
done
ys=$(echo $(ls -d $PWD/$tmp_folder/*))

echo "$xdata" > $tmp_folder/x_file

paste -d "$DELIMITER" $tmp_folder/x_file $ys > $output_file
echo -e "$yfilenames\n$(cat $output_file)" > $output_file

rm $(echo $output_file | sed "s/.csv/.tmp_csv/g")
rm -r $tmp_folder
